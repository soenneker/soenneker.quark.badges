@using Soenneker.Quark.Badges.Enums
@using Soenneker.Quark.Enums.Colors
@using Soenneker.Quark.Enums.Size
@using Soenneker.Quark.Spans
@inherits Soenneker.Quark.Components.Element

<Span @attributes="BuildAttributes()">
    @ChildContent
</Span>

@code {
    [Parameter]
    public BadgeType Type { get; set; } = BadgeType.Badge;

    [Parameter]
    public Color Color { get; set; } = Color.Primary;

    [Parameter]
    public Size Size { get; set; } = Size.Default;

    [Parameter]
    public bool Rounded { get; set; }

    private string? GetTypeClass()
    {
        if (Type == BadgeType.Pill)
            return "rounded-pill";

        if (Type == BadgeType.Dot)
            return "badge-dot";
        return null;
    }

    private string? GetColorClass()
    {
        return $"bg-{Color.Value}";
    }

    private string? GetSizeClass()
    {
        if (Size != Size.Default)
            return $"badge-{Size.Value}";
        return null;
    }

    protected override Dictionary<string, object> BuildAttributes()
    {
        Dictionary<string, object> attributes = base.BuildAttributes();

        var baseClasses = "badge";
        string? typeClass = GetTypeClass();
        string? colorClass = GetColorClass();
        string? sizeClass = GetSizeClass();

        if (typeClass != null)
            baseClasses = $"{baseClasses} {typeClass}";

        if (colorClass != null)
            baseClasses = $"{baseClasses} {colorClass}";

        if (sizeClass != null)
            baseClasses = $"{baseClasses} {sizeClass}";

        if (Rounded)
            baseClasses = $"{baseClasses} rounded";

        attributes["class"] = AppendToClass(attributes.GetValueOrDefault("class")
            ?.ToString(), baseClasses);

        return attributes;
    }
}
